#include <gtest/gtest.h>

#include <vector>

#include "gauss.h"

void compare(const Gauss::Mat &a, const Gauss::Vec &b, const Gauss::Mat &a_i, const Gauss::Vec &x) {
    auto solution = Gauss(a, b);
    auto x_ = solution.get_solution();
    auto a_i_ = solution.get_a_inversed();

    for (int i = 0; i < a_i_.size(); ++i) {
        for (int j = 0; j < a_i_.size(); ++j) {
            EXPECT_NEAR(a_i_[i][j], a_i[i][j], 0.001);
        }
    }

    for (int i = 0; i < b.size(); ++i) {
        EXPECT_NEAR(x_[i], x[i], 0.001);
    }
}

TEST(Gauss, Task1) {
    compare({
                    {1, 0, 0, 0},
                    {0, 1, 0, 0},
                    {0, 0, 1, 0},
                    {0, 0, 0, 1}
            }, {
                    {1, 2, 3, 4}
            }, {
                    {1, 0, 0, 0},
                    {0, 1, 0, 0},
                    {0, 0, 1, 0},
                    {0, 0, 0, 1}
            }, {
                    {1, 2, 3, 4}
            });
}

TEST(Gauss, Task2) {
    compare({
                    {1, 0, 0, 0},
                    {0, 2, 0, 0},
                    {0, 0, 3, 0},
                    {0, 0, 0, 4}
            }, {
                    {1, 2, 3, 4}
            }, {
                    {1, 0, 0, 0},
                    {0, 0.5, 0, 0},
                    {0, 0, 0.333, 0},
                    {0, 0, 0, 0.25}
            }, {
                    {1, 1, 1, 1}
            });
}

TEST(Gauss, Task3) {
    compare({
                    {0, 0, 0, 1},
                    {0, 0, 2, 0},
                    {0, 3, 0, 0},
                    {4, 0, 0, 0}
            }, {
                    {1, 1, 1, 1}
            }, {
                    {0, 0, 0, 0.25},
                    {0, 0, 0.333, 0},
                    {0, 0.5, 0, 0},
                    {1, 0, 0, 0}
            }, {
                    {0.25, 0.333, 0.5, 1}
            });
}

TEST(Gauss, Task4) {
    compare({
                    {1, 2, 0, 0},
                    {2, 4, 3, 0},
                    {0, 2, 0, 0},
                    {0, 0, 0, 4}
            }, {
                    {1, 1, 1, 1}
            }, {
                    {1, 0, -1, 0},
                    {0, 0, 0.5, 0},
                    {-0.666, 0.333, 0, 0},
                    {0, 0, 0, 0.25}
            }, {
                    {0, 0.5, -0.333, 0.25}
            });
}

TEST(Gauss, Task5) {
    auto a = std::vector<std::vector<double>>{
            {1, 2, 3, 4},
            {5, 6, 7, 8},
            {9, 10, 11, 12},
            {16, 15, 14, 13}
    };

    auto b = std::vector<double>{
            {1, 1, 1, 1}
    };

    EXPECT_THROW(Gauss(a, b), std::runtime_error);
}

TEST(Gauss, Task6) {
    compare({
                    {1, 2, 3, 4},
                    {-1, -2, 0, 3},
                    {0, 6, 11, 2},
                    {4, -2, 1, 0}
            }, {
                    {5, -2, 14, 4}
            }, {
                    {0.1642, -0.1791, -0.0597, 0.1642},
                    {0.2425, -0.2873, -0.0541, -0.1325},
                    {-0.1716, 0.1418, 0.1306, 0.0784},
                    {0.2164, 0.0821, -0.0560, -0.0336}
            }, {
                    {1, 0.5, 1, 0}
            });
}

TEST(Gauss, Task7) {
    compare({
                    {10, 6, 2, 0},
                    {5, 1, -2, 4},
                    {3, 5, 1, -1},
                    {0, 6, -2, 2}
            }, {
                    {25, 14, 10, 8}
            }, {
                    {-0.727, 0.727, 1.545, -0.682},
                    {0.273, -0.273, -0.455, 0.318},
                    {3.318, -2.818, -6.364, 2.455},
                    {2.500, -2.000, -5.000, 2.000}
            }, {
                    {2, 1, -0.5, 0.5}
            });
}
